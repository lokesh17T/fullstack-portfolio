-- 1. Create Tables

CREATE TABLE CUSTOMERS (
    CUSTOMER_ID INT PRIMARY KEY,
    NAME VARCHAR(100),
    PHONE VARCHAR(15),
    EMAIL VARCHAR(100),
    ADDRESS VARCHAR(200)
);

CREATE TABLE VEHICLES (
    VEHICLE_ID INT PRIMARY KEY,
    MODEL VARCHAR(50),
    BRAND VARCHAR(50),
    YEAR INT,
    STATUS VARCHAR(20),
    RENT_PER_DAY DECIMAL(8,2)
);

CREATE TABLE RENTALS (
    RENTAL_ID INT PRIMARY KEY,
    CUSTOMER_ID INT,
    VEHICLE_ID INT,
    RENTAL_DATE DATE,
    RETURN_DATE DATE,
    TOTAL_AMOUNT DECIMAL(10,2),
    FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS(CUSTOMER_ID),
    FOREIGN KEY (VEHICLE_ID) REFERENCES VEHICLES(VEHICLE_ID)
);

CREATE TABLE PAYMENTS (
    PAYMENT_ID INT PRIMARY KEY,
    RENTAL_ID INT,
    PAYMENT_DATE DATE,
    AMOUNT_PAID DECIMAL(10,2),
    PAYMENT_MODE VARCHAR(20),
    FOREIGN KEY (RENTAL_ID) REFERENCES RENTALS(RENTAL_ID)
);

-- 2. Insert Dummy Data

INSERT INTO CUSTOMERS VALUES
(1, 'RAVI KUMAR', '9876543210', 'RAVI@EXAMPLE.COM', 'CHENNAI'),
(2, 'SNEHA REDDY', '8765432109', 'SNEHA@EXAMPLE.COM', 'HYDERABAD'),
(3, 'ARJUN DAS', '7654321098', 'ARJUN@EXAMPLE.COM', 'BANGALORE'),
(4, 'MEENA IYER', '9543210987', 'MEENA@EXAMPLE.COM', 'COIMBATORE'),
(5, 'LOKESH THAMMANAGARI', '9123456780', 'LOKESH@EXAMPLE.COM', 'THANJAVUR');

INSERT INTO VEHICLES VALUES
(101, 'INNOVA CRYSTA', 'TOYOTA', 2020, 'AVAILABLE', 3000.00),
(102, 'DZIRE', 'MARUTI', 2019, 'RENTED', 1500.00),
(103, 'ERTIGA', 'MARUTI', 2021, 'AVAILABLE', 2500.00),
(104, 'XYLO', 'MAHINDRA', 2018, 'AVAILABLE', 2200.00),
(105, 'I20', 'HYUNDAI', 2022, 'RENTED', 1800.00);

INSERT INTO RENTALS (RENTAL_ID, CUSTOMER_ID, VEHICLE_ID, RENTAL_DATE, RETURN_DATE, TOTAL_AMOUNT) VALUES
(201, 1, 102, DATE '2025-06-01', DATE '2025-06-05', 7500.00),
(202, 2, 105, DATE '2025-06-03', DATE '2025-06-04', 1800.00),
(203, 3, 104, DATE '2025-06-10', DATE '2025-06-12', 4400.00),
(204, 4, 101, DATE '2025-06-20', NULL, NULL), -- ongoing rental
(205, 5, 103, DATE '2025-06-22', DATE '2025-06-24', 5000.00);

INSERT INTO PAYMENTS (PAYMENT_ID, RENTAL_ID, PAYMENT_DATE, AMOUNT_PAID, PAYMENT_MODE) VALUES
(301, 201, DATE '2025-06-05', 7500.00, 'UPI'),
(302, 202, DATE '2025-06-04', 1800.00, 'CASH'),
(303, 203, DATE '2025-06-12', 4400.00, 'CARD'),
(304, 205, DATE '2025-06-24', 5000.00, 'CARD');

-- 3. Queries

-- Show all available vehicles
SELECT * 
FROM VEHICLES
WHERE STATUS = 'AVAILABLE';

-- List all customers who rented a specific brand of car (e.g., 'Toyota')
SELECT DISTINCT C.CUSTOMER_ID, C.NAME, C.PHONE ,V.BRAND
FROM CUSTOMERS C
JOIN RENTALS R ON C.CUSTOMER_ID = R.CUSTOMER_ID
JOIN VEHICLES V ON R.VEHICLE_ID = V.VEHICLE_ID
WHERE V.BRAND = 'TOYOTA';

SELECT DISTINCT
    C.CUSTOMER_NAME
FROM
    CUSTOMERS  C
JOIN
    RENTALS  R ON C.CUSTOMER_ID = R.CUSTOMER_ID
JOIN
    VEHICLES  V ON R.VEHICLE_ID = V.VEHICLE_ID
WHERE
    VEHICLE.BRAND = 'honda';





-- Calculate total revenue earned
SELECT SUM(AMOUNT_PAID) AS TOTAL_REVENUE
FROM PAYMENTS;

-- Find which customer paid the highest amount
SELECT C.CUSTOMER_ID, C.NAME, P.AMOUNT_PAID
FROM PAYMENTS P
JOIN RENTALS R ON P.RENTAL_ID = R.RENTAL_ID
JOIN CUSTOMERS C ON R.CUSTOMER_ID = C.CUSTOMER_ID
WHERE P.AMOUNT_PAID = (
    SELECT MAX(AMOUNT_PAID) FROM PAYMENTS
);

-- Show vehicles not rented in last 30 days
SELECT *
FROM VEHICLES
WHERE VEHICLE_ID NOT IN (
    SELECT VEHICLE_ID
    FROM RENTALS
    WHERE RENTAL_DATE >= SYSDATE - 30
);

-- 4. View: Daily Rental Summary
CREATE VIEW DAILYRENTALSUMMARY AS
SELECT 
    RENTAL_DATE,
    COUNT(RENTAL_ID) AS TOTAL_RENTALS,
    SUM(TOTAL_AMOUNT) AS REVENUE
FROM RENTALS
GROUP BY RENTAL_DATE;

-- To use the view
-- SELECT * FROM DailyRentalSummary;

-- 5. Triggers

-- Trigger to mark vehicle as 'Rented' on new rental
CREATE OR REPLACE TRIGGER TRG_RENTAL_INSERT
AFTER INSERT ON RENTALS
FOR EACH ROW
BEGIN
    UPDATE VEHICLES
    SET STATUS = 'RENTED'
    WHERE VEHICLE_ID = :NEW.VEHICLE_ID;
END;
/

-- Trigger to mark vehicle as 'Available' on return
CREATE OR REPLACE TRIGGER TRG_RENTAL_RETURN
AFTER UPDATE OF RETURN_DATE ON RENTALS
FOR EACH ROW
WHEN (NEW.RETURN_DATE IS NOT NULL)
BEGIN
    UPDATE VEHICLES
    SET STATUS = 'AVAILABLE'
    WHERE VEHICLE_ID = :NEW.VEHICLE_ID;
END;
/